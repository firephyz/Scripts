# Produce the combinatorial list of extensions.  Where there are
# multiple permutations for a combination, the ordering is the
# selected by the forward ordering of the original list.  This matches
# the canonical ordering generated by the canonicalizer in the driver.
#
# For example,
#   $(call all_feat_combs, a b)
# will produce
#   +a +a+b +b
# but will not include
#   +b+a
# The rule is recursive and can be called with any (reasonable) list of
# extensions.
all_feat_combs	= +$(firstword $(1)) \
        $(if $(wordlist 2, $(words $(1)), $(1)), \
            $(foreach OPT, \
                $(call all_feat_combs, \
                $(wordlist 2, $(words $(1)), $(1))), \
        +$(firstword $(1))$(OPT) $(OPT)),)


###############################################################################
# Setup
###############################################################################
MULTILIB_OPTIONS     =
MULTILIB_DIRNAMES    =
MULTILIB_EXCEPTIONS  =
MULTILIB_MATCHES     =
MULTILIB_REUSE	     =


###############################################################################
# Options
###############################################################################
MULTILIB_OPTIONS      += marm
MULTILIB_DIRNAMES     += arm

MULTILIB_OPTIONS	    += march=armv7-a/march=armv7-a+fp/march=armv7-a+simd
MULTILIB_DIRNAMES	    += v7-a v7-a+fp v7-a+simd

MULTILIB_OPTIONS	    += mfloat-abi=soft/mfloat-abi=softfp/mfloat-abi=hard
MULTILIB_DIRNAMES	    += nofp softfp fpu


###############################################################################
# Requires
###############################################################################
simd_fpus             := neon neon-fp16 neon-vfpv3
vfp_fpus              := vfpv3 vfpv3-d16 vfpv3-d16-fp16 vfpv3-fp16
fpus                  := $(simd_fpus) $(vfp_fpus)

MULTILIB_REQUIRED     += mfloat-abi=soft/march=armv7-a
MULTILIB_REQUIRED     += mfloat-abi=softfp/march=armv7-a+fp mfloat-abi=softfp/march=armv7-a+simd
MULTILIB_REQUIRED     += mfloat-abi=hard/march=armv7-a+fp mfloat-abi=hard/march=armv7-a+simd

MULTILIB_REQUIRED     += $(foreach fpu,$(fpus),mfloat-abi=softfp/mfpu=$(fpu))
MULTILIB_REQUIRED     += $(foreach fpu,$(fpus),mfloat-abi=hard/mfpu=$(fpu))


###############################################################################
# Matches
###############################################################################

# MULTILIB_MATCHES     += $(foreach FPU, $(dp_fpus), mfpu?auto=mfpu?$(FPU))

#
# # Variables used.
# v7_a_arch_variants	:= $(call all_feat_combs, mp sec)
# v7_a_nosimd_variants	:= +fp +vfpv3 +vfpv3-d16-fp16 +vfpv3-fp16
# v7_a_simd_variants	:= +simd +neon-fp16
#
#
# # Map all basic v7,v7-a arch extensions to v7-a
# MULTILIB_MATCHES	+= $(foreach ARCH, $(v7_a_arch_variants), \
    #     march?armv7-a=march?armv7-a$(ARCH))
#
# # Map all v7,v7-a with +fp to all possible armv7-a variants
# MULTILIB_MATCHES	+= $(foreach ARCHVAR, $(v7_a_arch_variants), \
    #         $(foreach ARCH, $(v7_a_nosimd_variants), \
    #     march?armv7-a+fp=march?armv7-a$(ARCHVAR)$(ARCH)))
#
# # Map all v7-a FP variants to vfpv3-d16 (+fp)
# MULTILIB_MATCHES	+= $(foreach ARCH, $(filter-out +fp, $(v7_a_nosimd_variants)), \
    #     march?armv7-a+fp=march?armv7-a$(ARCH))
#
# # Map all v7-a SIMD variants to neon-vfpv3 (+simd)
# MULTILIB_MATCHES	+= $(foreach ARCH, $(filter-out +simd, $(v7_a_simd_variants)), \
    #     march?armv7-a+simd=march?armv7-a$(ARCH))
#
# MULTILIB_MATCHES	+= $(foreach ARCHVAR, $(v7_a_arch_variants), \
    #         $(foreach ARCH, $(v7_a_simd_variants), \
    #     march?armv7-a+simd=march?armv7-a$(ARCHVAR)$(ARCH)))


###############################################################################
# Reuse
###############################################################################
# # PART 4 - Reuse rules
# MULTILIB_REUSE	     += mthumb=mthumb/mfpu.auto
# MULTILIB_REUSE	     += mthumb/mfpu.auto/march.armv7+fp/mfloat-abi.hard=mthumb/march.armv7+fp/mfloat-abi.hard
# MULTILIB_REUSE	     += mthumb/mfpu.auto/march.armv7+fp/mfloat-abi.hard=mfpu.auto/march.armv7+fp/mfloat-abi.hard
# MULTILIB_REUSE	     += mthumb/mfpu.auto/march.armv7+fp/mfloat-abi.hard=march.armv7+fp/mfloat-abi.hard
# MULTILIB_REUSE	     += marm/mfpu.auto/march.armv7+fp/mfloat-abi.hard=marm/march.armv7+fp/mfloat-abi.hard
# MULTILIB_REUSE	     += marm/mfpu.auto/march.armv7+fp/mfloat-abi.hard=mfpu.auto/march.armv7+fp/mfloat-abi.hard
# MULTILIB_REUSE	     += marm/mfpu.auto/march.armv7+fp/mfloat-abi.hard=march.armv7+fp/mfloat-abi.hard
#
# # Use Thumb libraries for soft fp libs
# MULTILIB_REUSE		+= mthumb/march.armv7/mfloat-abi.soft=marm/march.armv7/mfloat-abi.soft
# #MULTILIB_REUSE		+= mthumb/march.armv7-a/mfloat-abi.soft=marm/march.armv7-a/mfloat-abi.soft
# MULTILIB_REUSE		+= $(foreach ABI, hard softfp, \
    #         $(foreach ARCH, armv7+fp armv7-a+fp armv7-a+simd, \
    #     mthumb/march.$(ARCH)/mfloat-abi.$(ABI)=marm/march.$(ARCH)/mfloat-abi.$(ABI)))
#
# # Softfp but no FP, use the soft-float libraries.
# # MULTILIB_REUSE		+= mthumb/march.armv7/mfloat-abi.soft=marm/march.armv7/mfloat-abi.softfp))
# # MULTILIB_REUSE		+= mthumb/march.armv7/mfloat-abi.soft=mthumb/march.armv7/mfloat-abi.softfp))
# MULTILIB_REUSE		+= marm/march.armv7/mfloat-abi.soft=marm/march.armv7/mfloat-abi.softfp
# MULTILIB_REUSE		+= mthumb/march.armv7/mfloat-abi.soft=mthumb/march.armv7/mfloat-abi.softfp
# MULTILIB_REUSE		+= marm/march.armv7-a/mfloat-abi.soft=marm/march.armv7-a/mfloat-abi.softfp
# MULTILIB_REUSE		+= mthumb/march.armv7-a/mfloat-abi.soft=mthumb/march.armv7-a/mfloat-abi.softfp
